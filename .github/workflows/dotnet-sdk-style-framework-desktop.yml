name: SDK Style .NET Framework Desktop

on:
  workflow_call:
    inputs:
          modules:
            required: true
            type: string

jobs:

  build:

    # strategy:
    #   matrix:
    #     configuration: [Release]

    runs-on: self-hosted

    strategy:
        matrix:
            manifest: ${{ fromJson(inputs.modules) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Load env from file
      uses: cardinalby/export-env-action@v2
      with:
        envFile: '.github/workflows/config/${{ inputs.module }}.env'
        expand: 'true'

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Install Nuget.exe
    - name: Setup Nuget
      uses: Nuget/setup-nuget@v1.0.5

    # Install NUnit console runner
    - name: Install NUnit.ConsoleRunner
      run: nuget install NUnit.ConsoleRunner -Version 3.13.0 -DirectDownload -OutputDirectory .

    # Execute all unit tests in the solution
    - name: Restore Target
      run: dotnet restore $env:Target_Project_Path

    - name: Restore Test
      run: dotnet restore $env:Test_Project_Path

    - name: Debug Build Target
      run: dotnet build $env:Target_Project_Path -c Debug

    - name: Debug Build Test
      run: dotnet build $env:Test_Project_Path -c Debug

    - name: Run UnitTests
      run: ./NUnit.ConsoleRunner.3.13.0/tools/nunit3-console.exe  $env:Test_Dll_Path

        
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:RestorePackagesConfig=true
      env:
        Configuration: Release

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: Release

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
